name: Kernel Builder with Submodules

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Augmente le timeout si nÃ©cessaire

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # Ceci est crucial pour les submodules
        fetch-depth: 0  # Important pour les tags

    - name: Generate build tag
      id: tag
      run: |
        BUILD_TAG="build-$(date +'%Y.%m.%d-%H%M')"
        echo "tag_name=${BUILD_TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${BUILD_TAG}"

    - name: Create and push tag
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag ${{ steps.tag.outputs.tag_name }}
        git push origin ${{ steps.tag.outputs.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          git-core gnupg flex bison build-essential zip curl \
          zlib1g-dev libc6-dev-i386 x11proto-core-dev libx11-dev \
          lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig

    - name: Build kernels
      run: |
        chmod +x build.sh
        # Liste des modÃ¨les Ã  builder
        MODELS=("d1" "d1xks" "d2s" "d2x" "d2xks")
        
        for model in "${MODELS[@]}"; do
          echo "ðŸ”¨ Building for $model"
          ./build.sh --model "$model" --ksu Y --debug N || exit 1
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-builds-${{ steps.tag.outputs.tag_name }}
        path: |
          build/out/**/ExtremeKernel*.zip
          build/out/**/*.md5  # Upload aussi les fichiers md5 si existants
        if-no-files-found: error